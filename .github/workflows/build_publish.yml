name: Build and Push Docker Image

permissions:
  contents: read      
  packages: write 

# This workflow runs on pushes to the main branch, or can be triggered manually.
on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    paths:
      - 'docker/*'
      - '.github/workflows/build_publish.yml'
  push:
    paths:
      - 'docker/*'
      - '.github/workflows/build_publish.yml'
  workflow_dispatch:

# Environment variables available to all jobs in this workflow.
env:
  # The name of the Docker image you are building.
  IMAGE_NAME: ${{ github.repository_owner }}/tricys
  # The path to the Dockerfile.
  DOCKERFILE_PATH: ./docker/tricys_om_ompython.dockerfile

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Sets the permissions for the GITHUB_TOKEN for this job.
    permissions:
      contents: read   # Needed to check out the repository.
      packages: write  # Needed to push Docker images to GHCR.

    steps:
      # 1. Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx.
      # This step is required to enable the GHA cache backend. It sets up a
      # more advanced builder instance that supports cache export.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Log in to the GitHub Container Registry (GHCR).
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Extract metadata (like tags and labels) for the Docker image.
      # This action automatically creates useful tags based on the Git ref.
      # For example, on the 'main' branch, it will create the 'latest' tag.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          # This flavor setting explicitly enables the 'latest' tag when
          # the workflow runs on the default branch (e.g., 'main').
          flavor: |
            latest=true

      # 5. Build the Docker image and push it to GHCR.
      # This single step handles both building and pushing.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true # Actually push the image.
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated in the previous step.
          labels: ${{ steps.meta.outputs.labels }} # Add git information as labels.
          cache-from: type=gha
          cache-to: type=gha,mode=max

        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true # Actually push the image.
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated in the previous step.
          labels: ${{ steps.meta.outputs.labels }} # Add git information as labels.
          cache-from: type=gha
          cache-to: type=gha,mode=max